cmake_minimum_required(VERSION 3.20.0)
project(finch LANGUAGES CXX C)

set(FINCH_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(FINCH_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}")

set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON)

set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")

# https://github.com/iree-org/iree/blob/c96372348654eea8548509d38df5c8e8b179aef3/CMakeLists.txt#L275-L280
if(MLIR_ENABLE_BINDINGS_PYTHON)
  find_package(Python3 COMPONENTS Interpreter Development)
  find_package(Python3 COMPONENTS Interpreter Development.Module NumPy REQUIRED)
  # nanobind uses Python_EXECUTABLE
  find_package(Python COMPONENTS Interpreter Development.Module NumPy REQUIRED)
endif()

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  find_package(MLIR REQUIRED CONFIG)

  message(STATUS "Using MLIRConfig.cmake in: ${MLIR_DIR}")
  message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

  set(LLVM_RUNTIME_OUTPUT_INTDIR "${CMAKE_BINARY_DIR}/bin")
  set(LLVM_LIBRARY_OUTPUT_INTDIR "${CMAKE_BINARY_DIR}/lib")
  set(MLIR_BINARY_DIR ${CMAKE_BINARY_DIR})

  list(APPEND CMAKE_MODULE_PATH "${MLIR_CMAKE_DIR}")
  list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")

  include(TableGen)
  include(AddLLVM)
  include(AddMLIR)
  include(HandleLLVMOptions)
else()
  # Build via external projects mechanism
  set(MLIR_MAIN_SRC_DIR "${LLVM_MAIN_SRC_DIR}/../mlir")
  set(MLIR_INCLUDE_DIR "${MLIR_MAIN_SRC_DIR}/include")
  set(MLIR_BINARY_DIR "${CMAKE_BINARY_DIR}")
  set(MLIR_GENERATED_INCLUDE_DIR "${LLVM_BINARY_DIR}/tools/mlir/include")
  set(MLIR_INCLUDE_DIRS "${MLIR_INCLUDE_DIR};${MLIR_GENERATED_INCLUDE_DIR}")
  list(APPEND CMAKE_MODULE_PATH "${MLIR_MAIN_SRC_DIR}/cmake/modules")
endif()

if(MLIR_ENABLE_BINDINGS_PYTHON)
  include(MLIRDetectPythonEnv)
  mlir_configure_python_dev_packages()
endif()

include_directories("${FINCH_SOURCE_DIR}/include")
include_directories("${FINCH_BINARY_DIR}/include")
include_directories("${MLIR_INCLUDE_DIRS}")
link_directories("${LLVM_BUILD_LIBRARY_DIR}")
add_definitions("${LLVM_DEFINITIONS}")

add_subdirectory(include)
add_subdirectory(lib)
if(MLIR_ENABLE_BINDINGS_PYTHON)
  message(STATUS "Enabling Python API")
  add_subdirectory(python)
endif()

add_subdirectory(test)
add_subdirectory(finch-opt)

